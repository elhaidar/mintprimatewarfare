{"version":3,"sources":["candy-machine.ts","connection.tsx","MintCountdown.tsx","Header.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","goLiveDate","Date","getTime","endSettings","endSettingType","date","number","treasury","wallet","tokenMint","gatekeeper","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","Keypair","generate","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","getUnixTs","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","marginRight","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","fontWeight","item","MintCountdown","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","Header","Grid","container","direction","wrap","Typography","variant","textAlign","getMintPrice","toDate","presale","formatNumber","asNumber","discountPrice","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","isVerifying","setIsVerifying","useEffect","GatewayStatus","COLLECTING_USER_INFORMATION","ACTIVE","disabled","onClick","CircularProgress","cluster","process","decimals","REACT_APP_SPL_TOKEN_DECIMALS","splTokenName","REACT_APP_SPL_TOKEN_NAME","WalletAmount","div","ConnectButton","WalletMultiButton","MintContainer","Home","props","balance","setBalance","setIsMinting","setIsActive","setSolanaExplorerLink","setItemsAvailable","setItemsRedeemed","setItemsRemaining","setIsSoldOut","payWithSplToken","setPayWithSplToken","setPrice","setPriceLabel","whitelistPrice","setWhitelistPrice","whitelistEnabled","setWhitelistEnabled","whitelistTokenBalance","setWhitelistTokenBalance","open","severity","alertState","setAlertState","useAnchorWallet","setCandyMachine","rpcUrl","rpcHost","displaySuccess","mintPublicKey","remaining","confetti","particleCount","spread","origin","y","document","getElementById","click","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","cndy","divider","Array","join","getTokenAccountBalance","tokenBalance","uiAmount","url","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","href","rel","target","toLocaleString","src","alt","Container","disableGutters","maxWidth","position","backgroundColor","signTransaction","clusterUrl","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","textDecoration","network","Connection","createTheme","palette","overrides","MuiButtonBase","MuiButton","textTransform","startIcon","endIcon","marginLeft","MuiPaper","elevation1","boxShadow","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","buyer"],"mappings":"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","file":"static/js/main.8e90b1c8.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | [number, anchor.BN];\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachine> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive:\r\n        state.data.goLiveDate &&\r\n        state.data.goLiveDate.toNumber() < new Date().getTime() / 1000 &&\r\n        (state.endSettings\r\n          ? state.endSettings.endSettingType.date\r\n            ? state.endSettings.number.toNumber() > new Date().getTime() / 1000\r\n            : itemsRedeemed < state.endSettings.number.toNumber()\r\n          : true),\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachine,\r\n    payer: anchor.web3.PublicKey,\r\n    mint: anchor.web3.Keypair\r\n): Promise<(string | undefined)[]> => {\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: anchor.web3.SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []],\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","import {\r\n    Keypair,\r\n    Commitment,\r\n    Connection,\r\n    RpcResponseAndContext,\r\n    SignatureStatus,\r\n    SimulatedTransactionResponse,\r\n    Transaction,\r\n    TransactionInstruction,\r\n    TransactionSignature,\r\n    Blockhash,\r\n    FeeCalculator,\r\n  } from '@solana/web3.js';\r\n  \r\n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n  \r\n  interface BlockhashAndFeeCalculator {\r\n    blockhash: Blockhash;\r\n    feeCalculator: FeeCalculator;\r\n  }\r\n  \r\n  export const getErrorForTransaction = async (\r\n    connection: Connection,\r\n    txid: string,\r\n  ) => {\r\n    // wait for all confirmation before geting transaction\r\n    await connection.confirmTransaction(txid, 'max');\r\n  \r\n    const tx = await connection.getParsedConfirmedTransaction(txid);\r\n  \r\n    const errors: string[] = [];\r\n    if (tx?.meta && tx.meta.logMessages) {\r\n      tx.meta.logMessages.forEach(log => {\r\n        const regex = /Error: (.*)/gm;\r\n        let m;\r\n        while ((m = regex.exec(log)) !== null) {\r\n          // This is necessary to avoid infinite loops with zero-width matches\r\n          if (m.index === regex.lastIndex) {\r\n            regex.lastIndex++;\r\n          }\r\n  \r\n          if (m.length > 1) {\r\n            errors.push(m[1]);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  \r\n    return errors;\r\n  };\r\n  \r\n  export enum SequenceType {\r\n    Sequential,\r\n    Parallel,\r\n    StopOnFailure,\r\n  }\r\n  \r\n  export async function sendTransactionsWithManualRetry(\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[][],\r\n    signers: Keypair[][],\r\n  ): Promise<(string | undefined)[]> {\r\n    let stopPoint = 0;\r\n    let tries = 0;\r\n    let lastInstructionsLength = null;\r\n    let toRemoveSigners: Record<number, boolean> = {};\r\n    instructions = instructions.filter((instr, i) => {\r\n      if (instr.length > 0) {\r\n        return true;\r\n      } else {\r\n        toRemoveSigners[i] = true;\r\n        return false;\r\n      }\r\n    });\r\n    let ids: string[] = [];\r\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n  \r\n    while (stopPoint < instructions.length && tries < 3) {\r\n      instructions = instructions.slice(stopPoint, instructions.length);\r\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n  \r\n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n      else tries = 0;\r\n  \r\n      try {\r\n        if (instructions.length === 1) {\r\n          const id = await sendTransactionWithRetry(\r\n            connection,\r\n            wallet,\r\n            instructions[0],\r\n            filteredSigners[0],\r\n            'single',\r\n          );\r\n          ids.push(id.txid);\r\n          stopPoint = 1;\r\n        } else {\r\n          const { txs } = await sendTransactions(\r\n            connection,\r\n            wallet,\r\n            instructions,\r\n            filteredSigners,\r\n            SequenceType.StopOnFailure,\r\n            'single',\r\n          );\r\n          ids = ids.concat(txs.map(t => t.txid));\r\n        }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n      console.log(\r\n        'Died on ',\r\n        stopPoint,\r\n        'retrying from instruction',\r\n        instructions[stopPoint],\r\n        'instructions length is',\r\n        instructions.length,\r\n      );\r\n      lastInstructionsLength = instructions.length;\r\n    }\r\n  \r\n    return ids;\r\n  }\r\n  \r\n  export const sendTransactions = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructionSet: TransactionInstruction[][],\r\n    signersSet: Keypair[][],\r\n    sequenceType: SequenceType = SequenceType.Parallel,\r\n    commitment: Commitment = 'singleGossip',\r\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => { },\r\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n    block?: BlockhashAndFeeCalculator,\r\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    const unsignedTxns: Transaction[] = [];\r\n  \r\n    if (!block) {\r\n      block = await connection.getRecentBlockhash(commitment);\r\n    }\r\n  \r\n    for (let i = 0; i < instructionSet.length; i++) {\r\n      const instructions = instructionSet[i];\r\n      const signers = signersSet[i];\r\n  \r\n      if (instructions.length === 0) {\r\n        continue;\r\n      }\r\n  \r\n      let transaction = new Transaction();\r\n      instructions.forEach(instruction => transaction.add(instruction));\r\n      transaction.recentBlockhash = block.blockhash;\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n  \r\n      if (signers.length > 0) {\r\n        transaction.partialSign(...signers);\r\n      }\r\n  \r\n      unsignedTxns.push(transaction);\r\n    }\r\n  \r\n    const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n  \r\n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n  \r\n    let breakEarlyObject = { breakEarly: false, i: 0 };\r\n    console.log(\r\n      'Signed txns length',\r\n      signedTxns.length,\r\n      'vs handed in length',\r\n      instructionSet.length,\r\n    );\r\n    for (let i = 0; i < signedTxns.length; i++) {\r\n      const signedTxnPromise = sendSignedTransaction({\r\n        connection,\r\n        signedTransaction: signedTxns[i],\r\n      });\r\n  \r\n      signedTxnPromise\r\n        .then(({ txid, slot }) => {\r\n          successCallback(txid, i);\r\n        })\r\n        .catch(reason => {\r\n          // @ts-ignore\r\n          failCallback(signedTxns[i], i);\r\n          if (sequenceType === SequenceType.StopOnFailure) {\r\n            breakEarlyObject.breakEarly = true;\r\n            breakEarlyObject.i = i;\r\n          }\r\n        });\r\n  \r\n      if (sequenceType !== SequenceType.Parallel) {\r\n        try {\r\n          await signedTxnPromise;\r\n        } catch (e) {\r\n          console.log('Caught failure', e);\r\n          if (breakEarlyObject.breakEarly) {\r\n            console.log('Died on ', breakEarlyObject.i);\r\n            // Return the txn we failed on by index\r\n            return {\r\n              number: breakEarlyObject.i,\r\n              txs: await Promise.all(pendingTxns),\r\n            };\r\n          }\r\n        }\r\n      } else {\r\n        pendingTxns.push(signedTxnPromise);\r\n      }\r\n    }\r\n  \r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      await Promise.all(pendingTxns);\r\n    }\r\n  \r\n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n  };\r\n  \r\n  export const sendTransaction = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    awaitConfirmation = true,\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n  ) => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n  \r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n  \r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  \r\n    const rawTransaction = transaction.serialize();\r\n    let options = {\r\n      skipPreflight: true,\r\n      commitment,\r\n    };\r\n  \r\n    const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n    let slot = 0;\r\n  \r\n    if (awaitConfirmation) {\r\n      const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        DEFAULT_TIMEOUT,\r\n        connection,\r\n        commitment,\r\n      );\r\n  \r\n      if (!confirmation)\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n      slot = confirmation?.slot || 0;\r\n  \r\n      if (confirmation?.err) {\r\n        const errors = await getErrorForTransaction(connection, txid);\r\n  \r\n        console.log(errors);\r\n        throw new Error(`Raw transaction ${txid} failed`);\r\n      }\r\n    }\r\n  \r\n    return { txid, slot };\r\n  };\r\n  \r\n  export const sendTransactionWithRetry = async (\r\n    connection: Connection,\r\n    wallet: any,\r\n    instructions: TransactionInstruction[],\r\n    signers: Keypair[],\r\n    commitment: Commitment = 'singleGossip',\r\n    includesFeePayer: boolean = false,\r\n    block?: BlockhashAndFeeCalculator,\r\n    beforeSend?: () => void,\r\n  ) => {\r\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n  \r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n  \r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n  \r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  \r\n    if (beforeSend) {\r\n      beforeSend();\r\n    }\r\n  \r\n    const { txid, slot } = await sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: transaction,\r\n    });\r\n  \r\n    return { txid, slot };\r\n  };\r\n  \r\n  export const getUnixTs = () => {\r\n    return new Date().getTime() / 1000;\r\n  };\r\n  \r\n  const DEFAULT_TIMEOUT = 30000;\r\n  \r\n  export async function sendSignedTransaction({\r\n    signedTransaction,\r\n    connection,\r\n    timeout = DEFAULT_TIMEOUT,\r\n  }: {\r\n    signedTransaction: Transaction;\r\n    connection: Connection;\r\n    sendingMessage?: string;\r\n    sentMessage?: string;\r\n    successMessage?: string;\r\n    timeout?: number;\r\n  }): Promise<{ txid: string; slot: number }> {\r\n    const rawTransaction = signedTransaction.serialize();\r\n    const startTime = getUnixTs();\r\n    let slot = 0;\r\n    const txid: TransactionSignature = await connection.sendRawTransaction(\r\n      rawTransaction,\r\n      {\r\n        skipPreflight: true,\r\n      },\r\n    );\r\n  \r\n    console.log('Started awaiting confirmation for', txid);\r\n  \r\n    let done = false;\r\n    (async () => {\r\n      while (!done && getUnixTs() - startTime < timeout) {\r\n        connection.sendRawTransaction(rawTransaction, {\r\n          skipPreflight: true,\r\n        });\r\n        await sleep(500);\r\n      }\r\n    })();\r\n    try {\r\n      const confirmation = await awaitTransactionSignatureConfirmation(\r\n        txid,\r\n        timeout,\r\n        connection,\r\n        'recent',\r\n        true,\r\n      );\r\n  \r\n      if (!confirmation)\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n  \r\n      if (confirmation.err) {\r\n        console.error(confirmation.err);\r\n        throw new Error('Transaction failed: Custom instruction error');\r\n      }\r\n  \r\n      slot = confirmation?.slot || 0;\r\n    } catch (err: any) {\r\n      console.error('Timeout Error caught', err);\r\n      if (err.timeout) {\r\n        throw new Error('Timed out awaiting confirmation on transaction');\r\n      }\r\n      let simulateResult: SimulatedTransactionResponse | null = null;\r\n      try {\r\n        simulateResult = (\r\n          await simulateTransaction(connection, signedTransaction, 'single')\r\n        ).value;\r\n      } catch (e) { }\r\n      if (simulateResult && simulateResult.err) {\r\n        if (simulateResult.logs) {\r\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n            const line = simulateResult.logs[i];\r\n            if (line.startsWith('Program log: ')) {\r\n              throw new Error(\r\n                'Transaction failed: ' + line.slice('Program log: '.length),\r\n              );\r\n            }\r\n          }\r\n        }\r\n        throw new Error(JSON.stringify(simulateResult.err));\r\n      }\r\n      // throw new Error('Transaction failed');\r\n    } finally {\r\n      done = true;\r\n    }\r\n  \r\n    console.log('Latency', txid, getUnixTs() - startTime);\r\n    return { txid, slot };\r\n  }\r\n  \r\n  async function simulateTransaction(\r\n    connection: Connection,\r\n    transaction: Transaction,\r\n    commitment: Commitment,\r\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n    // @ts-ignore\r\n    transaction.recentBlockhash = await connection._recentBlockhash(\r\n      // @ts-ignore\r\n      connection._disableBlockhashCaching,\r\n    );\r\n  \r\n    const signData = transaction.serializeMessage();\r\n    // @ts-ignore\r\n    const wireTransaction = transaction._serialize(signData);\r\n    const encodedTransaction = wireTransaction.toString('base64');\r\n    const config: any = { encoding: 'base64', commitment };\r\n    const args = [encodedTransaction, config];\r\n  \r\n    // @ts-ignore\r\n    const res = await connection._rpcRequest('simulateTransaction', args);\r\n    if (res.error) {\r\n      throw new Error('failed to simulate transaction: ' + res.error.message);\r\n    }\r\n    return res.result;\r\n  }\r\n  \r\n  async function awaitTransactionSignatureConfirmation(\r\n    txid: TransactionSignature,\r\n    timeout: number,\r\n    connection: Connection,\r\n    commitment: Commitment = 'recent',\r\n    queryStatus = false,\r\n  ): Promise<SignatureStatus | null | void> {\r\n    let done = false;\r\n    let status: SignatureStatus | null | void = {\r\n      slot: 0,\r\n      confirmations: 0,\r\n      err: null,\r\n    };\r\n    let subId = 0;\r\n    status = await new Promise(async (resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (done) {\r\n          return;\r\n        }\r\n        done = true;\r\n        console.log('Rejecting for timeout...');\r\n        reject({ timeout: true });\r\n      }, timeout);\r\n      try {\r\n        subId = connection.onSignature(\r\n          txid,\r\n          (result, context) => {\r\n            done = true;\r\n            status = {\r\n              err: result.err,\r\n              slot: context.slot,\r\n              confirmations: 0,\r\n            };\r\n            if (result.err) {\r\n              console.log('Rejected via websocket', result.err);\r\n              reject(status);\r\n            } else {\r\n              console.log('Resolved via websocket', result);\r\n              resolve(status);\r\n            }\r\n          },\r\n          commitment,\r\n        );\r\n      } catch (e) {\r\n        done = true;\r\n        console.error('WS error in setup', txid, e);\r\n      }\r\n      while (!done && queryStatus) {\r\n        // eslint-disable-next-line no-loop-func\r\n        (async () => {\r\n          try {\r\n            const signatureStatuses = await connection.getSignatureStatuses([\r\n              txid,\r\n            ]);\r\n            status = signatureStatuses && signatureStatuses.value[0];\r\n            if (!done) {\r\n              if (!status) {\r\n                console.log('REST null result for', txid, status);\r\n              } else if (status.err) {\r\n                console.log('REST error for', txid, status);\r\n                done = true;\r\n                reject(status.err);\r\n              } else if (!status.confirmations) {\r\n                console.log('REST no confirmations for', txid, status);\r\n              } else {\r\n                console.log('REST confirmation for', txid, status);\r\n                done = true;\r\n                resolve(status);\r\n              }\r\n            }\r\n          } catch (e) {\r\n            if (!done) {\r\n              console.log('REST connection error: txid', txid, e);\r\n            }\r\n          }\r\n        })();\r\n        await sleep(2000);\r\n      }\r\n    });\r\n  \r\n    //@ts-ignore\r\n    if (connection._signatureSubscriptions[subId])\r\n      connection.removeSignatureListener(subId);\r\n    done = true;\r\n    console.log('Returning status', status);\r\n    return status;\r\n  }\r\n  export function sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }\r\n  ","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.5),\r\n        marginRight: 0,\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: theme.spacing(1),\r\n      marginRight: 0,\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { MintCountdown } from \"./MintCountdown\";\r\nimport { toDate, formatNumber } from \"./utils\";\r\nimport { CandyMachine } from \"./candy-machine\";\r\n\r\ntype HeaderProps = {\r\n  candyMachine?: CandyMachine;\r\n};\r\n\r\nexport const Header = ({ candyMachine }: HeaderProps) => {\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {candyMachine && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Minted\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: \"bold\",\r\n                  textAlign: \"left\",\r\n                }}\r\n              >\r\n                {`${candyMachine?.state.itemsRedeemed}/${candyMachine?.state.itemsAvailable}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Price\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: \"bold\", textAlign: \"left\" }}\r\n              >\r\n                {`${getMintPrice(candyMachine)}`}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        <MintCountdown\r\n          date={toDate(\r\n            candyMachine?.state.goLiveDate\r\n              ? candyMachine?.state.goLiveDate\r\n              : candyMachine?.state.whitelistMintSettings?.presale\r\n              ? new anchor.BN(new Date().getTime() / 1000)\r\n              : undefined\r\n          )}\r\n          style={{ justifyContent: \"flex-end\" }}\r\n          status={\r\n            !candyMachine?.state?.isActive || candyMachine?.state?.isSoldOut\r\n              ? \"COMPLETED\"\r\n              : candyMachine?.state.whitelistMintSettings?.presale\r\n              ? \"PRESALE\"\r\n              : \"LIVE\"\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getMintPrice = (candyMachine: CandyMachine): string => {\r\n  const price = formatNumber.asNumber(\r\n    candyMachine.state.whitelistMintSettings?.presale &&\r\n      candyMachine.state.whitelistMintSettings?.discountPrice\r\n      ? candyMachine.state.whitelistMintSettings?.discountPrice!\r\n      : candyMachine.state.price!\r\n  );\r\n  return `◎ ${price}`;\r\n};\r\n","import styled from \"styled-components\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport { GatewayStatus, useGateway } from \"@civic/solana-gateway-react\";\r\nimport { CandyMachine } from \"./candy-machine\";\r\n\r\nexport const CTAButton = styled(Button)`\r\n  display: block !important;\r\n  margin: 0 auto !important;\r\n  background-color: var(--title-text-color) !important;\r\n  font-size: 1.2em;\r\n`;\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  isActive,\r\n  isSoldOut,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine: CandyMachine | undefined;\r\n  isMinting: boolean;\r\n  isActive: boolean;\r\n  isSoldOut: boolean;\r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n  const [isVerifying, setIsVerifying] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsVerifying(false);\r\n    if (\r\n      gatewayStatus === GatewayStatus.COLLECTING_USER_INFORMATION &&\r\n      clicked\r\n    ) {\r\n      // when user approves wallet verification txn\r\n      setIsVerifying(true);\r\n    } else if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      console.log(\"Verified human, now minting...\");\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={\r\n        candyMachine?.state.isSoldOut ||\r\n        isSoldOut ||\r\n        isMinting ||\r\n        !candyMachine?.state.isActive ||\r\n        isVerifying\r\n      }\r\n      onClick={async () => {\r\n        if (\r\n          isActive &&\r\n          candyMachine?.state.gatekeeper &&\r\n          gatewayStatus !== GatewayStatus.ACTIVE\r\n        ) {\r\n          console.log(\"Requesting gateway token\");\r\n          setClicked(true);\r\n          await requestGatewayToken();\r\n        } else {\r\n          console.log(\"Minting...\");\r\n          await onMint();\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {!candyMachine ? (\r\n        \"CONNECTING...\"\r\n      ) : candyMachine?.state.isSoldOut || isSoldOut ? (\r\n        \"SOLD OUT\"\r\n      ) : candyMachine?.state.isActive ? (\r\n        isVerifying ? (\r\n          \"VERIFYING...\"\r\n        ) : isMinting ? (\r\n          <CircularProgress />\r\n        ) : (\r\n          \"MINT\"\r\n        )\r\n      ) : candyMachine?.state.goLiveDate ? (\r\n        \"SOON\"\r\n      ) : (\r\n        \"UNAVAILABLE\"\r\n      )}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport confetti from \"canvas-confetti\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { LAMPORTS_PER_SOL, PublicKey } from \"@solana/web3.js\";\r\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletMultiButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport { GatewayProvider } from \"@civic/solana-gateway-react\";\r\nimport { Container, Snackbar, Paper } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport { Header } from \"./Header\";\r\nimport { AlertState, getAtaForMint } from \"./utils\";\r\nimport { MintButton } from \"./MintButton\";\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  CANDY_MACHINE_PROGRAM,\r\n} from \"./candy-machine\";\r\n\r\nconst cluster = process.env.REACT_APP_SOLANA_NETWORK!.toString();\r\nconst decimals = process.env.REACT_APP_SPL_TOKEN_DECIMALS\r\n  ? +process.env.REACT_APP_SPL_TOKEN_DECIMALS!.toString()\r\n  : 9;\r\nconst splTokenName = process.env.REACT_APP_SPL_TOKEN_NAME\r\n  ? process.env.REACT_APP_SPL_TOKEN_NAME.toString()\r\n  : \"TOKEN\";\r\n\r\nconst Card = styled(Paper)`\r\n  display: inline-block;\r\n  background-color: var(--card-background-lighter-color) !important;\r\n  margin: 5px;\r\n  padding: 24px;\r\n`;\r\n\r\nconst WalletAmount = styled.div`\r\n  color: black;\r\n  width: auto;\r\n  height: 80%;\r\n  padding: 0 0px 0 16px;\r\n  min-width: 48px;\r\n  min-height: auto;\r\n  border-radius: 24px;\r\n  background-color: var(--main-text-color);\r\n  box-sizing: border-box;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-weight: 500;\r\n  font-size: 0.7em;\r\n  text-transform: uppercase;\r\n  border: 0;\r\n  margin: auto;\r\n  display: inline-flex;\r\n  outline: 0;\r\n  position: relative;\r\n  align-items: center;\r\n  user-select: none;\r\n  vertical-align: middle;\r\n  justify-content: center;\r\n  gap: 10px;\r\n`;\r\n\r\nconst ConnectButton = styled(WalletMultiButton)`\r\n  margin: auto 0;\r\n  width: 100%;\r\n  height: 80%;\r\n  color: white;\r\n  font-size: 1em;\r\n  font-weight: bold;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex: 1 1 auto;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  background: linear-gradient(180deg, #12121e 0%, #2b2b3d 100%);\r\n`;\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes or whitelisted\r\n  const [solanaExplorerLink, setSolanaExplorerLink] = useState<string>(\"\");\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n  const [isSoldOut, setIsSoldOut] = useState(false);\r\n  const [payWithSplToken, setPayWithSplToken] = useState(false);\r\n  const [price, setPrice] = useState(0);\r\n  const [priceLabel, setPriceLabel] = useState<string>(\"SOL\");\r\n  const [whitelistPrice, setWhitelistPrice] = useState(0);\r\n  const [whitelistEnabled, setWhitelistEnabled] = useState(false);\r\n  const [whitelistTokenBalance, setWhitelistTokenBalance] = useState(0);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const wallet = useAnchorWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n\r\n  const refreshCandyMachineState = () => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n\r\n      const cndy = await getCandyMachineState(\r\n        wallet as anchor.Wallet,\r\n        props.candyMachineId,\r\n        props.connection\r\n      );\r\n\r\n      setCandyMachine(cndy);\r\n      setItemsAvailable(cndy.state.itemsAvailable);\r\n      setItemsRemaining(cndy.state.itemsRemaining);\r\n      setItemsRedeemed(cndy.state.itemsRedeemed);\r\n\r\n      var divider = 1;\r\n      if (decimals) {\r\n        divider = +(\"1\" + new Array(decimals).join(\"0\").slice() + \"0\");\r\n      }\r\n\r\n      // detect if using spl-token to mint\r\n      if (cndy.state.tokenMint) {\r\n        setPayWithSplToken(true);\r\n        // Customize your SPL-TOKEN Label HERE\r\n        // TODO: get spl-token metadata name\r\n        setPriceLabel(splTokenName);\r\n        setPrice(cndy.state.price.toNumber() / divider);\r\n        setWhitelistPrice(cndy.state.price.toNumber() / divider);\r\n      } else {\r\n        setPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n        setWhitelistPrice(cndy.state.price.toNumber() / LAMPORTS_PER_SOL);\r\n      }\r\n\r\n      // fetch whitelist token balance\r\n      if (cndy.state.whitelistMintSettings) {\r\n        setWhitelistEnabled(true);\r\n        if (\r\n          cndy.state.whitelistMintSettings.discountPrice !== null &&\r\n          cndy.state.whitelistMintSettings.discountPrice !== cndy.state.price\r\n        ) {\r\n          if (cndy.state.tokenMint) {\r\n            setWhitelistPrice(\r\n              cndy.state.whitelistMintSettings.discountPrice?.toNumber() /\r\n                divider\r\n            );\r\n          } else {\r\n            setWhitelistPrice(\r\n              cndy.state.whitelistMintSettings.discountPrice?.toNumber() /\r\n                LAMPORTS_PER_SOL\r\n            );\r\n          }\r\n        }\r\n        let balance = 0;\r\n        try {\r\n          const tokenBalance = await props.connection.getTokenAccountBalance(\r\n            (\r\n              await getAtaForMint(\r\n                cndy.state.whitelistMintSettings.mint,\r\n                wallet.publicKey\r\n              )\r\n            )[0]\r\n          );\r\n\r\n          balance = tokenBalance?.value?.uiAmount || 0;\r\n        } catch (e) {\r\n          console.error(e);\r\n          balance = 0;\r\n        }\r\n        setWhitelistTokenBalance(balance);\r\n        setIsActive(balance > 0);\r\n      } else {\r\n        setWhitelistEnabled(false);\r\n      }\r\n    })();\r\n  };\r\n\r\n  const renderCounter = ({ days, hours, minutes, seconds }: any) => {\r\n    return (\r\n      <div>\r\n        <Card elevation={1}>\r\n          <h1>{days}</h1>\r\n          <br />\r\n          Days\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{hours}</h1>\r\n          <br />\r\n          Hours\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{minutes}</h1>\r\n          <br />\r\n          Mins\r\n        </Card>\r\n        <Card elevation={1}>\r\n          <h1>{seconds}</h1>\r\n          <br />\r\n          Secs\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  function displaySuccess(mintPublicKey: any): void {\r\n    let remaining = itemsRemaining - 1;\r\n    setItemsRemaining(remaining);\r\n    setIsSoldOut(remaining === 0);\r\n    if (whitelistTokenBalance && whitelistTokenBalance > 0) {\r\n      let balance = whitelistTokenBalance - 1;\r\n      setWhitelistTokenBalance(balance);\r\n      setIsActive(balance > 0);\r\n    }\r\n    setItemsRedeemed(itemsRedeemed + 1);\r\n    const solFeesEstimation = 0.012; // approx\r\n    if (!payWithSplToken && balance && balance > 0) {\r\n      setBalance(\r\n        balance -\r\n          (whitelistEnabled ? whitelistPrice : price) -\r\n          solFeesEstimation\r\n      );\r\n    }\r\n    setSolanaExplorerLink(\r\n      cluster === \"devnet\" || cluster === \"testnet\"\r\n        ? \"https://explorer.solana.com/address/\" +\r\n            mintPublicKey +\r\n            \"?cluster=\" +\r\n            cluster\r\n        : \"https://explorer.solana.com/address/\" + mintPublicKey\r\n    );\r\n    throwConfetti();\r\n  }\r\n\r\n  function throwConfetti(): void {\r\n    confetti({\r\n      particleCount: 400,\r\n      spread: 70,\r\n      origin: { y: 0.6 },\r\n    });\r\n  }\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      document.getElementById(\"#identity\")?.click();\r\n      if (wallet && candyMachine?.program && wallet.publicKey) {\r\n        const mint = anchor.web3.Keypair.generate();\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey, mint)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            \"singleGossip\",\r\n            true\r\n          );\r\n        }\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n\r\n          // update front-end amounts\r\n          displaySuccess(mint.publicKey);\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = \"Transaction Timeout! Please try again.\";\r\n        } else if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n  ]);\r\n\r\n  let url = \"https://primatewarfare.club/\";\r\n  let twitter = \"https://twitter.com/PrimateWarfare\";\r\n  let facebook =\r\n    \"https://www.facebook.com/Primate-Warfare-Club-101453802450280/\";\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <div className=\"bg-img\"></div>\r\n\r\n        <section id=\"navbar\">\r\n          <nav className=\"navbar navbar-expand-lg navbar-dark\">\r\n            <div className=\"container\">\r\n              <a className=\"navbar-brand\"> </a>\r\n              <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#navbarNav\"\r\n                aria-controls=\"navbarNav\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n              >\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n              </button>\r\n              <div\r\n                className=\"collapse navbar-collapse nav-basis\"\r\n                id=\"navbarNav\"\r\n              >\r\n                <ul className=\"navbar-nav ms-auto\">\r\n                  <li className=\"nav-item px-3\">\r\n                    <a\r\n                      className=\"nav-link\"\r\n                      href={twitter}\r\n                      rel=\"noreferrer\"\r\n                      target={\"_blank\"}\r\n                    >\r\n                      <i className=\"fab fa-twitter fa-lg\"></i>\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item px-3\">\r\n                    <a className=\"nav-link\" href=\"#\">\r\n                      <i className=\"fab fa-discord fa-lg\"></i>\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item px-3\">\r\n                    <a className=\"nav-link\" href=\"#\">\r\n                      <i className=\"fab fa-telegram fa-lg\"></i>\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item px-3\">\r\n                    <a\r\n                      className=\"nav-link\"\r\n                      href={facebook}\r\n                      rel=\"noreferrer\"\r\n                      target={\"_blank\"}\r\n                    >\r\n                      <i className=\"fab fa-facebook fa-lg\"></i>\r\n                    </a>\r\n                  </li>\r\n                  <li className=\"nav-item px-3 align-items-center d-flex\">\r\n                    {wallet ? (\r\n                      <WalletAmount>\r\n                        {(balance || 0).toLocaleString() + \" SOL\"}\r\n                        <ConnectButton />\r\n                      </WalletAmount>\r\n                    ) : (\r\n                      <ConnectButton>Connect Wallet</ConnectButton>\r\n                    )}\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        </section>\r\n        <section id=\"banner\">\r\n          <div className=\"banner\">\r\n            <div className=\"container\">\r\n              <div className=\"row text-center\">\r\n                <div className=\"col-md-12 align-items-center d-flex justify-content-center\">\r\n                  <a href={url} rel=\"noreferrer\" target={\"_blank\"}>\r\n                    <img src=\"logo-min.png\" className=\"logo\" alt=\"logo\" />\r\n                  </a>\r\n                  <h3>PRIMATE WARFARE CLUB</h3>\r\n                </div>\r\n              </div>\r\n              <br />\r\n              <div className=\"row\">\r\n                <div className=\"col-md-5 text-center\">\r\n                  <img\r\n                    src=\"primate.gif\"\r\n                    alt=\"\"\r\n                    id=\"image\"\r\n                    style={{ width: \"300px\" }}\r\n                  />\r\n                </div>\r\n                <div className=\"col-md-7 text-center my-auto align-items-center px-5\">\r\n                  <h4\r\n                    style={{ fontWeight: \"bold\", padding: \"20px\" }}\r\n                    className=\"align-items-start\"\r\n                  >\r\n                    Mint Yours!\r\n                  </h4>\r\n                  <Container disableGutters>\r\n                    <Container\r\n                      disableGutters\r\n                      maxWidth=\"md\"\r\n                      style={{ position: \"relative\" }}\r\n                    >\r\n                      <Paper>\r\n                        {!wallet?.publicKey ? (\r\n                          <ConnectButton style={{ borderRadius: \"0\" }}>\r\n                            Connect Wallet\r\n                          </ConnectButton>\r\n                        ) : (\r\n                          <>\r\n                            <MintContainer\r\n                              style={{\r\n                                padding: 20,\r\n                                backgroundColor: \"#311e4e\",\r\n                              }}\r\n                            >\r\n                              <Header candyMachine={candyMachine} />\r\n                              {candyMachine?.state.isActive &&\r\n                              candyMachine?.state.gatekeeper &&\r\n                              wallet.publicKey &&\r\n                              wallet.signTransaction ? (\r\n                                <GatewayProvider\r\n                                  wallet={{\r\n                                    publicKey:\r\n                                      wallet.publicKey ||\r\n                                      new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                                    //@ts-ignore\r\n                                    signTransaction: wallet.signTransaction,\r\n                                  }}\r\n                                  gatekeeperNetwork={\r\n                                    candyMachine?.state?.gatekeeper\r\n                                      ?.gatekeeperNetwork\r\n                                  }\r\n                                  clusterUrl={rpcUrl}\r\n                                  options={{ autoShowModal: false }}\r\n                                >\r\n                                  <MintButton\r\n                                    candyMachine={candyMachine}\r\n                                    isMinting={isMinting}\r\n                                    isActive={isActive}\r\n                                    isSoldOut={isSoldOut}\r\n                                    onMint={onMint}\r\n                                  />\r\n                                </GatewayProvider>\r\n                              ) : (\r\n                                <MintButton\r\n                                  candyMachine={candyMachine}\r\n                                  isMinting={isMinting}\r\n                                  isActive={isActive}\r\n                                  isSoldOut={isSoldOut}\r\n                                  onMint={onMint}\r\n                                />\r\n                              )}\r\n                            </MintContainer>\r\n                          </>\r\n                        )}\r\n                      </Paper>\r\n                    </Container>\r\n\r\n                    <Snackbar\r\n                      open={alertState.open}\r\n                      autoHideDuration={6000}\r\n                      onClose={() =>\r\n                        setAlertState({ ...alertState, open: false })\r\n                      }\r\n                    >\r\n                      <Alert\r\n                        onClose={() =>\r\n                          setAlertState({ ...alertState, open: false })\r\n                        }\r\n                        severity={alertState.severity}\r\n                      >\r\n                        {alertState.message}\r\n                      </Alert>\r\n                    </Snackbar>\r\n                  </Container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <footer className=\"text-white pt-5 pb-4\" id=\"community\">\r\n          <div className=\"container text-md-left\">\r\n            <div className=\"row align-items-center\">\r\n              <div className=\"col-md-12 text-center col-lg-12\">\r\n                <p>\r\n                  Copyright ©2022 All rights reserved by:\r\n                  <a\r\n                    href={url}\r\n                    rel=\"noreferrer\"\r\n                    target={\"_blank\"}\r\n                    style={{ textDecoration: \"none\" }}\r\n                  >\r\n                    <strong style={{ color: \"#FED02A\" }}>\r\n                      Primate Warfare Club\r\n                    </strong>\r\n                  </a>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </footer>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import \"./App.css\";\r\nimport Home from \"./Home\";\r\nimport { useMemo } from \"react\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  overrides: {\r\n    MuiButtonBase: {\r\n      root: {\r\n        justifyContent: \"center\",\r\n      },\r\n    },\r\n    MuiButton: {\r\n      root: {\r\n        textTransform: undefined,\r\n        padding: \"12px 16px\",\r\n      },\r\n      startIcon: {\r\n        marginRight: 8,\r\n      },\r\n      endIcon: {\r\n        marginLeft: 8,\r\n      },\r\n    },\r\n    MuiPaper: {\r\n      root: {\r\n        backgroundColor: \"none\",\r\n      },\r\n      elevation1: {\r\n        boxShadow: \"0\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSlopeWallet(),\r\n      getSolflareWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    []\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect={true}>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={txTimeout}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n"],"sourceRoot":""}